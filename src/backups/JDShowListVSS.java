/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backups;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import model.Client;
import model.ManageOfOneClient;
import model.ManageOfOneClient.StatusClient;
import model.Server;

/**
 *
 * @author Glenius
 */
public class JDShowListVSS extends javax.swing.JDialog {

    ArrayList<Server> listVSS;
    FrameApplicationInit jfrm;
    ArrayList<Client> clientsVSS;
    int sizeListClients;
    /**
     * Creates new form JDShowListVSS
     * @param parent
     */
    public JDShowListVSS(java.awt.Frame parent) {
        super(parent, true);
        this.jfrm = (FrameApplicationInit) parent;
        initComponents();
        this.setDefaultLookAndFeelDecorated(true);
        this.setLocationRelativeTo(parent);
        this.jTextArea1.setEditable(false);
        
        try{
            if(this.jfrm.isInitVSS()){
                this.getInform();
                this.initListVSS();
                this.fillListVSS();

                this.setVisible(true);
            }else{
                new Exception("list VSS still not initialized");
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        checkboxMarkAsOpenedIncident = new java.awt.Checkbox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        checkboxMarkAsOpenedIncident.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        checkboxMarkAsOpenedIncident.setLabel("Mark as opened Incident");

        jList1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jScrollPane3.setViewportView(jScrollPane2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Clients VSS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Clients VSS pending to open incident");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkboxMarkAsOpenedIncident, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 80, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(167, 167, 167))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(checkboxMarkAsOpenedIncident, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if(this.checkboxMarkAsOpenedIncident.isEnabled()){
            this.markAsOpenedIncident();
        }
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox checkboxMarkAsOpenedIncident;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void markAsOpenedIncident() {
        
        ArrayList<Client> clients = new ArrayList<Client>();
        
        for(int i=0;i<this.sizeListClients;++i){
            if(this.jList1.isSelectedIndex(i)){
                Client client = this.clientsVSS.get(i);
                clients.add(client);
            }
        }
        new JDOpenIncident(this.jfrm, true, clients);
        
    }

    private void getInform() throws Exception{
        
        this.listVSS = this.jfrm.getServerListVSS();
        
        String string = "Revisar el estado de los VSS de los siguientes clientes\n\n";
        
        for(int i=0;i<listVSS.size();++i){
            Server server = listVSS.get(i);
            string += server.getNameServer() + ":\n";
            for(Client clientVSS:server.getClients()){
                string += "\t" + clientVSS.getName() + "\n";
            }
            string += "\n";
        }
        
        this.jTextArea1.setText(string);
    }

    private void fillListVSS() {
        
        
        if(this.sizeListClients > 0){
            DefaultListModel<String> model = new DefaultListModel();
            
            model.clear();
            for (Client client: this.clientsVSS){
                String name = client.getName();
                
                model.addElement(name);
            }
            this.jList1.setModel(model);
            this.jList1.setVisible(true);
        }else{
            emptyListSaveSets();
        }
        
        this.jList1.setSelectionInterval(0, this.sizeListClients-1);
    }

    private void initListVSS() {
        
        this.clientsVSS = new ArrayList<Client>();
        
        for(int i=0;i<this.listVSS.size();++i){
            for(Client client: this.listVSS.get(i).getClients()){
                ManageOfOneClient manager = client.getManageClient();
                StatusClient status = manager.getStatusClient();
                if(status == StatusClient.FAILED_TODAY || status == StatusClient.FAILED_NOT_TODAY){
                    this.clientsVSS.add(client);
                } 
            }
        }
        
        this.jList1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
        
        this.sizeListClients = this.clientsVSS.size();
        
        this.jList1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
                
            }

            @Override
            public void mousePressed(MouseEvent me) {
                
            }

            @Override
            public void mouseReleased(MouseEvent me) {
                }

            @Override
            public void mouseEntered(MouseEvent me) {
                }

            @Override
            public void mouseExited(MouseEvent me) {
                }

        });
    }
    
    private void emptyListSaveSets(){
        this.jList1.setVisible(false);
        this.jList1.clearSelection();
        this.jList1.removeAll();
    }
    
    
}
